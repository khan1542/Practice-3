org 07C00h
main:
        jmp short main1
        db 60 dup (90h)
main1:  mov ax,3        ;ф-я установки текстового видеорежима
        int 10h         ;установить текстовый видеорежим
        mov ax,cs
        mov ds,ax
        mov si,msg1     ;сообщение
        mov dh,1       ;x 1-го сообщения
        mov dl,21       ;y 1-го сообщения
        mov ah,6        ;цвет
        call printtext  ;вывести сообщение
        mov si,msg2     ;сообщение
        mov dh,4       ;x 2-го сообщения
        mov dl,22      ;y 2-го сообщения
        mov ah,8       ;цвет
        call printtext  ;вывести сообщение

        mov al,0dbh     ;код символа
        mov ah,4        ;цвет
        mov dh,64        ;начальный х фигуры
        mov dl,2       ;начальный y фигуры
        mov cx,1        ;сколько символов выводить по горизонтали
lp2:    push cx         ;сохранить регистры
        push dx 
lp1:    call printchar  ;вывести символ
        inc dh          ;сдвинуться вправо
        loop lp1        ;вывести всю строку
        pop dx          ;восстановить регистры
        pop cx
        sub dh,1        ;начало очередной строки на 4 символа влево
        add cx,2        ;в строке на 8 символов больше
        inc dl          ;перейти на следующую строку экрана
        cmp dl,11       ;пока не достигли заданной строки
        jnz lp2         ;продолжить
;завешиваем компьютер
        cli
        hlt

;процедура вывода текста на экран
;ds:si - ASCII-строка
;ah-атрибуты
;dh - x
;dl - y
printtext:
        cld
prtlp:  lodsb           ;читаем сивол
        test al,al      ;если 0
        jz prtex        ;то закончить вывод
        call printchar  ;выводим сивол
        inc dh          ;следующий символ
        jmp prtlp       ;продолжаем вывод
prtex:  ret             ;выход из подпрограммы
;процедура вывода символа на экран
;al - символ
;ah-атрибуты
;dh - x
;dl - y
printchar:
        push es         ;сохраняем регистры
        push bx
        push dx
        push 0b800h     ;настраиваем сегментный регистр на видеопамять
        pop es
vyv:    push dx         ;сохраняем координаты вывода
;смещение в экранном сегменте расчитывается так: dl(y)*80(кол-во столбцов)*2(два байта на символ) + dh(x)*2(два байта на символ)
        xor dh,dh       ;обнуляем старшую часть dx
        shl dx,5        ;умножаем dx на 32
        mov bx,dx       ;сохраняем y*32
        shl dx,2        ;умножаем еще на 4(y*128)
        add bx,dx       ;y*160 (y*32+y*128=y*160)
        pop dx          ;восстанавливаем координаты
        mov dl,dh       ;x помещаем в dl
        xor dh,dh       ;обнуляем старшую часть dx
        shl dx,1        ;x*2
        add bx,dx       ;окончательно расчитываем адрес символа в видеопамяти
        mov [es:bx],ax  ;выводим на экран(прямо в экранную память)
        pop dx          ;восстанавливаем регистры
        pop bx
        pop es
        ret             ;выход из подпрограммы
; Строки
msg1 db 'Asabin Konstantin',0
msg2 db 'NMT-373907',0

; эта директива заставляет компилятор заполнить оставшееся место нулями (до 510-и байт)
times 510-($-main) db 0
; а эти два байта нужны чтобы биос определил что это действительно бут сектор
dw 0xAA55
